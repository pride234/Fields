using Fields;
using NUnit.Framework;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks; 

namespace FieldsTests
{
    [TestFixture]
    public class PolynomialTests
    {
//-----------------Addition-------------------------------------------------------------------------------------------------------------------------------------------------------------------|		

		[Test]
		
		[TestCase("11110111011011100001010011010000101110101010110000101001100101010000011000010011100000101111110010110011111111110101111000011000010010110110011101001111111001011010010110101",
		"0",
		"11110111011011100001010011010000101110101010110000101001100101010000011000010011100000101111110010110011111111110101111000011000010010110110011101001111111001011010010110101")]
		
		[TestCase("00010010100010010001001111011011101000010101011110000110100110000101000000101100110011011100100111001101000011010100000011000010100101000111001101101110001001101101100001101",
		"1",
		"10010100010010001001111011011101000010101011110000110100110000101000000101100110011011100100111001101000011010100000011000010100101000111001101101110001001101101100001100")]

		[TestCase("110111101101101",
		"110111101101101",
		"0")]
		
		[TestCase("11011110001101110100000010111101111001101010101010110101111110010000011011101010101101011000101100000010000001111100000111111111100101100100101011000000010110011110111010100",
		"10011100001011011001010100101110100010010001101100011101110111000111100010000110100000010101011000110010000000001111011000000100000111110000110101100010110111010000100011100",
		"1000010000110101101010110010011011011111011000110101000001001010111111001101100001101001101110100110000000001110011011111111011100010010100011110100010100001001110011001000")]
		
		[TestCase("11000001111101000000110001000101010010111111100100000100111110001011110010110011000110000001101010001101010011011001111110111101010010001110011010011001101000010111011100011",
		"00001000110100000000111010101000100010000100001010010001110000010011000001010100111011111000111101110110110101011011001011101101110101011010110101111101110001000001011000001",
		"11001001001001000000001011101101110000111011101110010101001110011000110011100111111101111001010111111011100110000010110101010000100111010100101111100100011001010110000100010")]
		
		[TestCase("01100100010000100101100101101111111010010110001101101001101111011001010110000101010010001111101111101101000011111000011010000100110111111001010101100000011000100000010001011",
		"11001001000111011100010010001001101001011010010100000011000111000000000111011101100010001001011001101101011000001010001001110010111110101100101011101100101001011111110000000",
		"10101101010111111001110111100110010011001100011001101010101000011001010001011000110000000110110110000000011011110010010011110110001001010101111110001100110001111111100001011")]
		
		[TestCase("00110010010001001111111010100010011111000111111001001111100101111001011100110011110000010001010010010001000101101011111110010011100111111000100101110100110011101100010000111",
		"11101100011111000000001000011101010001100101001001100001011011001101010110100101000111001101010101001011111000101010101010000110010100010001011001100001100011011101001110001",
		"11011110001110001111110010111111001110100010110000101110111110110100001010010110110111011100000111011010111101000001010100010101110011101001111100010101010000110001011110110")]
		
		[TestCase("1101011101110101110101101011101011111101010011101011010100010101",
		"10011011001110000011100011110000000011000110100000001010101101010001011001100100010110010011101011001100111001111101010100000111010011001000110111100011110010011000100110010",
		"10011011001110000011100011110000000011000110100000001010101101010001011001100100010110010011101011001100111000010110111010101001111110010101101000001001101111000010000100111")]
		
		[TestCase("01100110110110011100000111010011011011000110010100110100011110111110000100100110101101010001111000100110000001110101011111101110101000000000110000001001011010100010000101100",
		"10000101010111101010101010100100101101000100000110100000110010100100011111000100010101000100101111101111010001011011011011011111010011000010010100100111001010110001111010100",
		"11100011100001110110101101110111110110000010010010010100101100011010011011100010111000010101010111001001010000101110000100110001111011000010100100101110010000010011111111000")]

		public void AdditionTests(string a, string b, string expected) 
		{
			var a_number = new Polynomial(a);
			var b_number = new Polynomial(b);
			var d = a_number.Add(b_number);

			var actual = d.ToBit();

			Assert.AreEqual(expected, actual);
		}
//-----------------Multiplying-------------------------------------------------------------------------------------------------------------------------------------------------------------------|		

		[Test]
		
		[TestCase("11110111011011100001010011010000101110101010110000101001100101010000011000010011100000101111110010110011111111110101111000011000010010110110011101001111111001011010010110101",
		"0",
		"0")]
		
		[TestCase("00010010100010010001001111011011101000010101011110000110100110000101000000101100110011011100100111001101000011010100000011000010100101000111001101101110001001101101100001101",
		"1",
		"10010100010010001001111011011101000010101011110000110100110000101000000101100110011011100100111001101000011010100000011000010100101000111001101101110001001101101100001101")]
		
		[TestCase("110101101010110101101010101101011010101010",
		"11010110101010",
		"1010001000101111110000001010000000000010111101001000100")]

		[TestCase("11001111110011100000110010010101100101010110111001110100010011111100100001010111010100011101010111010000100110101101100101001100101111100000111010011001100100101010011010010",
		"11111011110111011111000001010111101010100100000111111111000001101001010100110100101010110111000001000100000100000011111110110001001010111011101100101101001011100011101101100",
		"10010010111100101011101010110000010010010011101101000111011111001111110000010010111010010100000110101111101001111010011110101000101011111110111110101110010110111011110011111")]

		[TestCase("01100100010000100101100101101111111010010110001101101001101111011001010110000101010010001111101111101101000011111000011010000100110111111001010101100000011000100000010001011",
		"11001001000111011100010010001001101001011010010100000011000111000000000111011101100010001001011001101101011000001010001001110010111110101100101011101100101001011111110000000",
		"11010011111110000110110001011001011010000110110000111011111111101100001101101111011010111010011000000101000010011110100101111101010000001000001111011110111010100000011101001")]

		[TestCase("00110010010001001111111010100010011111000111111001001111100101111001011100110011110000010001010010010001000101101011111110010011100111111000100101110100110011101100010000111",
		"11101100011111000000001000011101010001100101001001100001011011001101010110100101000111001101010101001011111000101010101010000110010100010001011001100001100011011101001110001",
		"110111011100011000100110010010011101001001110111000010001000100010110001110111101011101000010001100101111000010100100100111101111100110100101101100101111010100000110001111")]

		[TestCase("1101011101110101110101101011101011111101010011101011010100010101",
		"10011011001110000011100011110000000011000110100000001010101101010001011001100100010110010011101011001100111001111101010100000111010011001000110111100011110010011000100110010",
		"11001110111111111100010111011111101111111000101000011010101101001000000000110001010101110000101111110111001010011010110100000100110011010000110010101100000111011110110101000")]

		[TestCase("01100110110110011100000111010011011011000110010100110100011110111110000100100110101101010001111000100110000001110101011111101110101000000000110000001001011010100010000101100",
		"10000101010111101010101010100100101101000100000110100000110010100100011111000100010101000100101111101111010001011011011011011111010011000010010100100111001010110001111010100",
		"10011010100010011000111100110100001110011110101110101110000010011000110101010110001010100001010010011100111001011000001010100001100000000011110110101100001110110100100111001")]

		public void MultiplyingTests(string a, string b, string expected) 
		{
			var a_number = new Polynomial(a);
			var b_number = new Polynomial(b);
			var d = a_number.MultiplyBy(b_number);

			var actual = d.ToBit();

			Assert.AreEqual(expected, actual);
		}
//-----------------Square-------------------------------------------------------------------------------------------------------------------------------------------------------------------|		
		[Test]
		
		[TestCase("11110111011011100001010011010000101110101010110000101001100101010000011000010011100000101111110010110011111111110101111000011000010010110110011101001111111001011010010110101",
		"1110101100100000011010100001000111011001001111100010100001111100100101111100100100111111010100110111010010000000010000101111101111110101110101000111010101100100111110111010")]
		
		[TestCase("00100110010001010001010110100001111110100011001101111110000011000000011001111010011011100101011101110010001100100000010010111101011100101100001010100111110101010000100110010",
		"11001110000011101001011011010011110000101100011001011001010100011011001001100010001011011110111010110000101011011100100100110010111110100001101101011010100001110000011000010")]

		[TestCase("01110000010100101110000111011110000001110000010000110101000010000001010011111011001101111110001110001010111110000110101101001100110110011101111010111100001000111100000010000",
		"11000001110001001100111001000101001000111110101111100100001001001111011001100001010010100100110001110101010111001000100101101110010001101010010000010100110001011101111000010")]

		[TestCase("00010000010101000111110100001100110100101111011001010001101010100100000001000110111001000011000001000010000110011000001011101011111001100000000000001011111000110001001010000",
		"111111001000011010100100101101011101001111001101000111101010010110011000001010100011010101011110010000101111100110110010100110110101100000010000001000111011110010010010")]

		[TestCase("00111101100101111101100000111000100100111001000100110010011111110000100101111010110000010011101000000010100010011111111101100110010110000011000011011100111111001000101000001",
		"1111111000110100001001000101111001111101101110100110001011011110111000010011100010000010011101100001011111010010011010010000000000011110011100001110011100101111001001101010")]

		public void SquareTest(string a, string expected) 
		{
			var a_number = new Polynomial(a);
			var d = a_number.Square();

			var actual = d.ToBit();

			Assert.AreEqual(expected, actual);
		}
//-----------------GornerPower-------------------------------------------------------------------------------------------------------------------------------------------------------------------|		

		[Test]
		
		[TestCase("01001110101010011101000100111101010010001111010000000011100101001000011010100101000101111011110101101010100100000001000100011111110110001011110001110011100000001100000000100",
		"00010000100000101111110010010011101100111100011000011111011011100011110111011011111111001110011110001111100001101100100001000000010110001111001101011001000111001111011110100",
		"1110100100111111011000011010001011001110000011000011100000010111111100000011101000100001011101101101101111100000010101101110000101000101101001011011000100000000110110100100")]
		
		[TestCase("11101010000010011001100101110100001011101100101010111000101111110001100001010111111110011011100000110101101101101000000001110111100000101011101001110011011010100010010001100",
		"10010000010011111111110000010001001010111001011111010011100100111111001100101000011111100011100101111101101010011001010111110111000010110010100101001011001011011010100101110",
		"10111001111011000001100101101111100000100101010010101111101001000110101011110111010000011001000100111010100011011011100011001101110100000100011011000100111000101001010001001")]
		
		[TestCase("110101101010110101101010101101011010101010",
		"11010110101010",
		"10111001110110001000110011110101110101111011011100011101000110000001010100100010000111111011100011110000110101011101110010110110110101011111010000110110000111011111101011001")]

		[TestCase("01000011000100010100011100111110101001001111100011101000110110010111011011000100000010100101001101000100101111101011011100001100001000010010101101011101100010010101110100111",
		"00111110000001100110101101010101101111001101011011001100110100111010011000000010001000011011011001101111111110101001101111010011001101110011111010011010011100100101011100011",
		"1001110011111010010111000001001011110011000111110110111011000111110110010000010000001011010000010101111010100000011100101111000011000011110110111111111011101011010001101011")]

		[TestCase("10110101000100011011110011010100000100000000101111100110001101111110111111001000100100111000001011001101000110011100000110101110000001010001010011101110100110111100011010111",
		"00110101011001111001110110110111101110110000110110000000011000011100000111101110000011101010100111010010001110110110111111111100111011011001000011001001001110100001011101101",
		"10100101110111000010011011001100010010010000000010001111100010011000101011100000101100101110110101100010100100000110101000010101101000101010100011110100100100000001101101")]

		[TestCase("00010011001001011111010011000010011110111001111111011111000111001011011001110110100111101001111110011011001101111100100000111010001110101100010000010110011010001000100110101",
		"00101011111111011010101100110001110010101110101100101010001110111000011001000100101110011010011000011011001011000111001011101000011100000101100100001101100001000110100110111",
		"11101011111110111011111000011101001101001011111011110100110010100000101000111100111000110101111010010011111011011011111100110110011010010111001001100101101010100000101100110")]

		[TestCase("1101011101110101110101101011101011111101010011101011010100010101",
		"00001100111001011000100010100110100100100011001111101100111110011100011011000111101111001001111110010011111101110110010001110111101011001001111111100000101101100111001010111",
		"1110001110010111001100110101111101010001010100101000111110000110001001101110010101000011000011100000011011100111011011100000100101010101001111010110000000100100001101101100")]

		[TestCase("01100110110110011100000111010011011011000110010100110100011110111110000100100110101101010001111000100110000001110101011111101110101000000000110000001001011010100010000101100",
		"10000101010111101010101010100100101101000100000110100000110010100100011111000100010101000100101111101111010001011011011011011111010011000010010100100111001010110001111010100",
		"11100000100011010010000100111011100101100011010011111110010110001000001110100100010001110101110011011001100101010011100000111000101010000111010001011110000010100000111011000")]

		public void GornerPower(string a, string b, string expected) 
		{
			var a_number = new Polynomial(a);
			var b_number = new Polynomial(b);
			var d = a_number.GornerPower(b_number);

			var actual = d.ToBit();

			Assert.AreEqual(expected, actual);
		}
//-----------------Reverse-------------------------------------------------------------------------------------------------------------------------------------------------------------------|		
		[Test]
		
		[TestCase("11110111011011100001010011010000101110101010110000101001100101010000011000010011100000101111110010110011111111110101111000011000010010110110011101001111111001011010010110101",
		"10111001101000010101001000110101100000001101001110000010110100001010100011001101010110100001000110000011101000101110001011101101001000001011000111110001000110001000101100010")]
		
		[TestCase("00100110010001010001010110100001111110100011001101111110000011000000011001111010011011100101011101110010001100100000010010111101011100101100001010100111110101010000100110010",
		"10101100110101100010101010101110100110001101011011000011011001001100011100000111010000001100010110000000010011000101100000101110101011010010100010100111110011001011101111111")]

		[TestCase("01110000010100101110000111011110000001110000010000110101000010000001010011111011001101111110001110001010111110000110101101001100110110011101111010111100001000111100000010000",
		"11000100001001010100000011000100011110001101010111111101001100101001000010101111100011011000101010111010101011100001110100010100011001111111000011000000010011111010111011010")]

		[TestCase("00010000010101000111110100001100110100101111011001010001101010100100000001000110111001000011000001000010000110011000001011101011111001100000000000001011111000110001001010000",
		"10111011011010000010010110100010001001101110001010000101110110100001000010111010100000101111100001110110011001011000011101001011010100011100100000100101010101000010011001101")]

		[TestCase("00111101100101111101100000111000100100111001000100110010011111110000100101111010110000010011101000000010100010011111111101100110010110000011000011011100111111001000101000001",
		"10001000100001111110100011110110001111110010110001001101110001000001101001110000001001000011000100010100101010111110100111001001100010110001111001001010001000111111110010101")]

		public void ReverseTest(string a, string expected) 
		{
			var a_number = new Polynomial(a);
			var d = a_number.Reverse();

			var actual = d.ToBit();

			Assert.AreEqual(expected, actual);
		}
    }
}
